#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('todolist:server');
const http = require('http');

const socketio = require("socket.io");
const userController = require("../controllers/userController");
const taskController = require("../controllers/taskController");
const jwt = require("jsonwebtoken");
const config = require("../config");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = socketio(server);

io.on("connection", socket => {
  console.log("user connected");

  socket.on("disconnect", () => {
    console.log("user disconnected");
  });
});

const registrationNsp = io.of("/users/register");
registrationNsp.on("connection", socket => {
  socket.on("registration", user => {
    userController.addUser(user).then(response => {
      socket.emit("registration", response);
    });
  });
});

const loginNsp = io.of("/users/login");
loginNsp.on("connection", socket => {
  socket.on("login", user => {
    userController.loginUser(user).then(response => {
      socket.emit("login", response);
    });
  });
});

const tasksNsp = io.of("/tasks");

tasksNsp.use((socket, next) => {
  if (socket.handshake.query && socket.handshake.query.token) {
    jwt.verify(socket.handshake.query.token, config.secret, (err, decoded) => {
      if (!err) {
        next();
      }
    });
  }
});

tasksNsp.on("connection", socket => {
  socket.on("getTasks", data => {
    taskController.getTasks(data.filter, data.userId).then(response => {
      socket.emit("getTasks", response);
    });
  });

  socket.on("addTask", data => {
    taskController.addTask(data.task, data.userId).then(response => {
      socket.emit("addTask", response);
    });
  });

  socket.on("updateTask", data => {
    taskController.editTask(data.newTask, data.id).then(response => {
      socket.emit("updateTask", response);
    });
  });

  socket.on("deleteTask", data => {
    taskController.deleteTask(data.id).then(response => {
      socket.emit("deleteTask", response);
    });
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
